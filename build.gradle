import java.text.SimpleDateFormat

apply plugin: 'java'
apply plugin: 'maven'
apply plugin: 'idea'

sourceCompatibility = '1.6'
targetCompatibility = '1.6'
version = '0.19.0-SNAPSHOT'
elasticSearchVerstion = '0.19.0-SNAPSHOT'
jettyVersion = '7.4.5.v20110725'
group = 'com.sonian'
githubUser = 'sonian'
versionPath = '/com/sonian/elasticsearch/plugin/jetty'
pluginName = 'Jetty'


configurations {
    deployerJars
	dist
}

dependencies {
    compile group: 'org.elasticsearch', name: 'elasticsearch', version: elasticSearchVerstion
    compile group: 'org.eclipse.jetty', name: 'jetty-server', version: jettyVersion
    compile group: 'org.eclipse.jetty', name: 'jetty-xml', version: jettyVersion
    compile group: 'org.eclipse.jetty', name: 'jetty-security', version: jettyVersion

    dist group: 'org.eclipse.jetty', name: 'jetty-server', version: jettyVersion
    dist group: 'org.eclipse.jetty', name: 'jetty-xml', version: jettyVersion
    dist group: 'org.eclipse.jetty', name: 'jetty-security', version: jettyVersion

    testCompile group: 'org.easymock', name: 'easymock', version: '3.0'
    testCompile group: 'org.testng', name: 'testng', version: '6.2'
    testCompile group: 'org.hamcrest', name:'hamcrest-core', version:'1.3.RC2', transitive: false
    testCompile group: 'org.hamcrest', name:'hamcrest-library', version:'1.3.RC2', transitive: false
    testCompile group: 'org.codehaus.jackson', name:'jackson-core-asl', version:'1.8.5', transitive: false
    testCompile group: 'org.codehaus.jackson', name:'jackson-mapper-asl', version:'1.8.5', transitive: false
    testCompile group: 'org.eclipse.jetty', name: 'test-jetty-servlet', version: jettyVersion

    runtime 'org.slf4j:slf4j-api:1.5.11'
    runtime 'org.slf4j:slf4j-log4j12:1.5.11'
    runtime 'log4j:log4j:1.2.16'
}

//=====================================================================================================================
buildTime = new Date()
SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss");
sdf.setTimeZone(TimeZone.getTimeZone("UTC"));
buildTimeStr = sdf.format(buildTime)

test {
	useTestNG()
}

mavenRepoUser = System.getenv("REPO_USER")
mavenRepoPass = System.getenv("REPO_PASS")

mavenRepoUrl = System.getenv("REPO_URL");
if (mavenRepoUrl == null) {
    mavenRepoUrl = "http://oss.sonatype.org/service/local/staging/deploy/maven2/"
}
mavenSnapshotRepoUrl = System.getenv("SNAPSHOT_REPO_URL");
if (mavenSnapshotRepoUrl == null) {
    mavenSnapshotRepoUrl = "http://oss.sonatype.org/content/repositories/snapshots"
}

repositories {
    mavenLocal()
    mavenCentral()
    mavenRepo urls: 'https://repository.jboss.org/nexus/content/groups/public'
	mavenRepo urls: 'http://repository.codehaus.org/'
	mavenRepo urls: 'http://elasticsearch.googlecode.com/svn/maven'
	mavenRepo urls: 'http://oss.sonatype.org/content/repositories/releases'
	mavenRepo urls: 'http://oss.sonatype.org/content/repositories/snapshots'
	mavenRepo urls: 'http://download.java.net/maven/2/'
}

ideaProject {
    javaVersion = '1.6'
    withXml { provider ->
        provider.node.component.find { it.@name == 'VcsDirectoryMappings' }.mapping.@vcs = 'Git'
    }
}

task dist(type: Zip) {
    from jar.outputs.files
    from configurations.dist
    from('bin') {
        into 'bin'
        fileMode = 0755
    }
}

processResources.doLast {
    Properties versionProps = new Properties();
    versionProps.setProperty("number", rootProject.version)
    versionProps.setProperty("date", buildTimeStr)

    File versionFile = new File((File)sourceSets.main.classesDir, versionPath + '/version.properties')
    versionFile.parentFile.mkdirs()
    versionFile.withOutputStream {
        versionProps.store(it, '')
    }
}

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

artifacts {
    archives sourcesJar
    archives javadocJar
}

uploadArchives {
    repositories.mavenDeployer {
        configuration = configurations.deployerJars
        repository(url: mavenRepoUrl) {
            authentication(userName: mavenRepoUser, password: mavenRepoPass)
        }
        snapshotRepository(url: mavenSnapshotRepoUrl) {
            authentication(userName: mavenRepoUser, password: mavenRepoPass)
        }

        pom.project {
            inceptionYear '2011'
            name rootProject.name
            description pluginName + ' plugin for elasticsearch'
            licenses {
                license {
                    name 'The Apache Software License, Version 2.0'
                    url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    distribution 'repo'
                }
            }
            scm {
                connection 'git://github.com/' + githubUser + '/' + rootProject.name + '.git'
                developerConnection 'git@github.com:' + githubUser + '/' + rootProject.name + '.git'
                url 'http://github.com/' + githubUser + '/' + rootProject.name
            }
        }
        pom.whenConfigured {pom ->
            pom.dependencies = pom.dependencies.findAll {dep -> dep.scope != 'test' } // removes the test scoped ones
            pom.dependencies = pom.dependencies.findAll {dep -> !dep.artifactId.contains('jna') } // remove jna, its optional
            pom.dependencies = pom.dependencies.findAll {dep -> !dep.artifactId.contains('jarjar') }
            pom.dependencies = pom.dependencies.findAll {dep -> !dep.artifactId.contains('log4j') }
            pom.dependencies = pom.dependencies.findAll {dep -> !dep.artifactId.contains('slf4j') }
            pom.dependencies = pom.dependencies.findAll {dep -> !dep.artifactId.contains('jline') }
        }
    }
}

task wrapper(type: Wrapper) {
    gradleVersion = '1.0-milestone-3'
}
//=====================================================================================================================
